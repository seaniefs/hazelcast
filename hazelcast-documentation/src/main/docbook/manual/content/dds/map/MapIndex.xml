<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->


<sect2 xml:id="MapIndex" version="5.0" xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Indexing</title>

    <para>
        Hazelcast distributed queries will run on each member in parallel and only results
        will return the conn. When a query runs on a member, Hazelcast will iterate through
        the entire owned entries and find the matching ones. Can we make this even faster? Yes
        by indexing the mostly queried fields. Just like you would do for your database. Of
        course, indexing will add overhead for each
        <literal>write</literal>
        operation but
        queries will be a lot faster. If you are querying your map a lot then make sure to add
        indexes for most frequently queried fields. So if your
        <literal>active and age &lt;
            30
        </literal>
        query, for example, is used a lot then make sure you add index for
        <literal>active</literal>
        and
        <literal>age</literal>
        fields. Here is how:
        <programlisting language="java"><![CDATA[IMap imap = Hazelcast.getMap("employees");
imap.addIndex("age", true);        // ordered, since we have ranged queries for this field
imap.addIndex("active", false);    // not ordered, because boolean field cannot have range
]]></programlisting>
        API
        <literal>IMap.addIndex(fieldName, ordered)</literal>
        is used for adding
        index. For a each indexed field, if you have -ranged- queries such
        as<literal>age&gt;30</literal>,
        <literal>age BETWEEN 40 AND 60</literal>
        then
        <literal>ordered</literal>
        parameter should be<literal>true</literal>, otherwise set
        it to<literal>false</literal>.
    </para>
    <para>
        Also you can define
        <code>IMap</code>
        indexes in configuration.
    </para>
    <para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="italic">Hazelcast XML configuration</emphasis>
                    <programlisting language="xml"><![CDATA[
<map name="default">
    ...
    <indexes>
        <index ordered="false">name</index>
        <index ordered="true">age</index>
    </indexes>
</map>]]></programlisting>
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="italic">Config API</emphasis>
                    <programlisting language="java">
mapConfig.addMapIndexConfig(new MapIndexConfig("name", false));
mapConfig.addMapIndexConfig(new MapIndexConfig("age", true));
                    </programlisting>
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis role="italic">Spring XML configuration</emphasis>
                    <programlisting language="xml"><![CDATA[
<hz:map name="default">
    <hz:indexes>
        <hz:index attribute="name"/>
        <hz:index attribute="age" ordered="true"/>
    </hz:indexes>
</hz:map>]]></programlisting>
                </para>
            </listitem>
        </itemizedlist>
    </para>
</sect2>
